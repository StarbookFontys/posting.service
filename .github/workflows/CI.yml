name: CI 

on: 
  pull_request:
    branches:
      - release

jobs:
  test:
    name: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
      - name: Install dependencies
        run: dotnet restore
        working-directory: ./posting-service-tests
      - name: Build
        run: dotnet build
        working-directory: ./posting-service-tests
      - name: Test with the dotnet CLI
        run: dotnet test
        working-directory: ./posting-service-tests
        
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Sample" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  snyk:
    name: snyk scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      - name: Install dependencies
        run: dotnet restore
        working-directory: ./posting-service-tests
      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth 2a5d4af2-16ee-41e4-89b2-1fa146212e53

      - name: Run Snyk Test
        run: snyk test
      

                  
    
